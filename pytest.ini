[pytest]
# pytest configuration for SwiftGen

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Test directories
testpaths = 
    backend/tests
    tests

# Add backend to Python path for imports
pythonpath = backend

# Minimum Python version
minversion = 3.11

# Command line options
addopts = 
    -v
    --strict-markers
    --tb=short
    --cov=backend
    --cov-report=html
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --maxfail=3
    --durations=10
    --log-cli-level=INFO
    -p no:warnings

# Test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (may require external services)
    slow: Slow tests that take more than 5 seconds
    llm: Tests that require LLM API access
    websocket: WebSocket related tests
    modification: Modification workflow tests
    generation: App generation tests
    recovery: Error recovery tests
    critical: Critical path tests that must pass

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = backend
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */test_venv/*

[coverage:report]
precision = 2
skip_covered = False
show_missing = True
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod

[coverage:html]
directory = htmlcov

# Logging
log_cli = true
log_cli_format = %(asctime)s [%(levelname)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout for tests (in seconds)
timeout = 300
timeout_method = thread

# Parallel execution (disabled by default for reliability)
# Use pytest -n auto to run in parallel
# addopts += -n auto

# Ignore specific warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning