{
  "title": "Learned Solution: Create a cool calculator with fancy UI...",
  "content": "Error: Create a cool calculator with fancy UI\n\nSolution: {\"files\": [{\"path\": \"Sources/App.swift\", \"content\": \"import SwiftUI\\n\\n@main\\nstruct CoolCalculaApp: App {\\n    var body: some Scene {\\n        WindowGroup {\\n            ContentView()\\n        }\\n    }\\n}\"}, {\"path\": \"Sources/ContentView.swift\", \"content\": \"import SwiftUI\\n\\nstruct ContentView: View {\\n    @StateObject private var viewModel = CalculatorViewModel()\\n    \\n    var body: some View {\\n        ZStack {\\n            Color.black.edgesIgnoringSafeArea(.all)\\n            \\n            VStack {\\n                Spacer()\\n                \\n                HStack {\\n                    Spacer()\\n                    Text(viewModel.displayText)\\n                        .font(.system(size: 72))\\n                        .foregroundColor(.white)\\n                        .padding()\\n                }\\n                \\n                ForEach(viewModel.rows, id: \\\\.self) { row in\\n                    HStack {\\n                        ForEach(row, id: \\\\.self) { button in\\n                            CalculatorButton(title: button, action: {\\n                                viewModel.performAction(for: button)\\n                            })\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\\nstruct CalculatorButton: View {\\n    let title: String\\n    let action: () -> Void\\n    \\n    var body: some View {\\n        Button(action: action) {\\n            Text(title)\\n                .font(.largeTitle)\\n                .frame(width: 80, height: 80)\\n                .foregroundColor(.white)\\n                .background(Color.orange)\\n                .clipShape(Circle())\\n                .padding(4)\\n        }\\n    }\\n}\"}, {\"path\": \"Sources/CalculatorViewModel.swift\", \"content\": \"import Foundation\\n\\nclass CalculatorViewModel: ObservableObject {\\n    @Published var displayText = \\\"0\\\"\\n    \\n    private var currentNumber = 0.0\\n    private var previousNumber = 0.0\\n    private var operation = \\\"\\\"\\n    private var isTyping = false\\n    \\n    let rows = [\\n        [\\\"AC\\\", \\\"\\u00b1\\\", \\\"%\\\", \\\"\\u00f7\\\"],\\n        [\\\"7\\\", \\\"8\\\", \\\"9\\\", \\\"\\u00d7\\\"],\\n        [\\\"4\\\", \\\"5\\\", \\\"6\\\", \\\"\\u2212\\\"],\\n        [\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"+\\\"],\\n        [\\\"0\\\", \\\".\\\", \\\"=\\\"]\\n    ]\\n    \\n    func performAction(for button: String) {\\n        switch button {\\n        case \\\"AC\\\":\\n            clear()\\n        case \\\"\\u00b1\\\":\\n            toggleSign()\\n        case \\\"%\\\":\\n            percentage()\\n        case \\\"=\\\":\\n            calculate()\\n        case \\\"\\u00f7\\\", \\\"\\u00d7\\\", \\\"\\u2212\\\", \\\"+\\\":\\n            setOperation(button)\\n        case \\\".\\\":\\n            addDecimal()\\n        default:\\n            addNumber(button)\\n        }\\n    }\\n    \\n    private func clear() {\\n        currentNumber = 0\\n        previousNumber = 0\\n        operation = \\\"\\\"\\n        isTyping = false\\n        displayText = \\\"0\\\"\\n    }\\n    \\n    private func toggleSign() {\\n        currentNumber = -currentNumber\\n        updateDisplay()\\n    }\\n    \\n    private func percentage() {\\n        if previousNumber != 0 {\\n            currentNumber = previousNumber * currentNumber / 100\\n        } else {\\n            currentNumber /= 100\\n        }\\n        updateDisplay()\\n    }\\n    \\n    private func calculate() {\\n        switch operation {\\n        case \\\"\\u00f7\\\":\\n            currentNumber = previousNumber / currentNumber\\n        case \\\"\\u00d7\\\":\\n            currentNumber = previousNumber * currentNumber\\n        case \\\"\\u2212\\\":\\n            currentNumber = previousNumber - currentNumber\\n        case \\\"+\\\":\\n            currentNumber = previousNumber + currentNumber\\n        default:\\n            break\\n        }\\n        updateDisplay()\\n        previousNumber = 0\\n        operation = \\\"\\\"\\n    }\\n    \\n    private func setOperation(_ op: String) {\\n        if previousNumber != 0 {\\n            calculate()\\n        }\\n        operation = op\\n        previousNumber = currentNumber\\n        currentNumber = 0\\n        isTyping = false\\n    }\\n    \\n    private func addDecimal() {\\n        if isTyping && !displayText.contains(\\\".\\\") {\\n            displayText += \\\".\\\"\\n        }\\n    }\\n    \\n    private func addNumber(_ number: String) {\\n        if isTyping {\\n            if displayText.count < 9 {\\n                displayText += number\\n            }\\n        } else {\\n            displayText = number\\n            isTyping = true\\n        }\\n        currentNumber = Double(displayText) ?? 0\\n    }\\n    \\n    private func updateDisplay() {\\n        if currentNumber == floor(currentNumber) {\\n            displayText = String(format: \\\"%.0f\\\", currentNumber)\\n        } else {\\n            displayText = String(currentNumber)\\n        }\\n        isTyping = false\\n    }\\n}\"}], \"features\": [\"Basic calculator operations: addition, subtraction, multiplication, division\", \"Percentage calculation\", \"Toggle positive/negative sign\", \"Decimal point support\", \"All Clear (AC) to reset calculator\", \"Sleek black background with orange circular buttons\", \"Large display text for easy readability\"], \"bundle_id\": \"com.swiftgen.coolcalcula\", \"app_name\": \"Cool Calcula\", \"unique_aspects\": \"The calculator has a modern, visually appealing design with the black background and orange circular buttons. The large display font makes it easy to read the current value. It supports standard calculator functions like AC to clear, percentage, decimal point, and toggling the sign, in addition to basic math operations.\", \"project_tracking_id\": \"proj_847cd51c\", \"generated_by_llm\": \"claude\"}",
  "tags": [
    "learned",
    "auto-generated",
    "solution"
  ],
  "severity": "normal",
  "solutions": [
    "{\"files\": [{\"path\": \"Sources/App.swift\", \"content\": \"import SwiftUI\\n\\n@main\\nstruct CoolCalculaApp: App {\\n    var body: some Scene {\\n        WindowGroup {\\n            ContentView()\\n        }\\n    }\\n}\"}, {\"path\": \"Sources/ContentView.swift\", \"content\": \"import SwiftUI\\n\\nstruct ContentView: View {\\n    @StateObject private var viewModel = CalculatorViewModel()\\n    \\n    var body: some View {\\n        ZStack {\\n            Color.black.edgesIgnoringSafeArea(.all)\\n            \\n            VStack {\\n                Spacer()\\n                \\n                HStack {\\n                    Spacer()\\n                    Text(viewModel.displayText)\\n                        .font(.system(size: 72))\\n                        .foregroundColor(.white)\\n                        .padding()\\n                }\\n                \\n                ForEach(viewModel.rows, id: \\\\.self) { row in\\n                    HStack {\\n                        ForEach(row, id: \\\\.self) { button in\\n                            CalculatorButton(title: button, action: {\\n                                viewModel.performAction(for: button)\\n                            })\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\\nstruct CalculatorButton: View {\\n    let title: String\\n    let action: () -> Void\\n    \\n    var body: some View {\\n        Button(action: action) {\\n            Text(title)\\n                .font(.largeTitle)\\n                .frame(width: 80, height: 80)\\n                .foregroundColor(.white)\\n                .background(Color.orange)\\n                .clipShape(Circle())\\n                .padding(4)\\n        }\\n    }\\n}\"}, {\"path\": \"Sources/CalculatorViewModel.swift\", \"content\": \"import Foundation\\n\\nclass CalculatorViewModel: ObservableObject {\\n    @Published var displayText = \\\"0\\\"\\n    \\n    private var currentNumber = 0.0\\n    private var previousNumber = 0.0\\n    private var operation = \\\"\\\"\\n    private var isTyping = false\\n    \\n    let rows = [\\n        [\\\"AC\\\", \\\"\\u00b1\\\", \\\"%\\\", \\\"\\u00f7\\\"],\\n        [\\\"7\\\", \\\"8\\\", \\\"9\\\", \\\"\\u00d7\\\"],\\n        [\\\"4\\\", \\\"5\\\", \\\"6\\\", \\\"\\u2212\\\"],\\n        [\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"+\\\"],\\n        [\\\"0\\\", \\\".\\\", \\\"=\\\"]\\n    ]\\n    \\n    func performAction(for button: String) {\\n        switch button {\\n        case \\\"AC\\\":\\n            clear()\\n        case \\\"\\u00b1\\\":\\n            toggleSign()\\n        case \\\"%\\\":\\n            percentage()\\n        case \\\"=\\\":\\n            calculate()\\n        case \\\"\\u00f7\\\", \\\"\\u00d7\\\", \\\"\\u2212\\\", \\\"+\\\":\\n            setOperation(button)\\n        case \\\".\\\":\\n            addDecimal()\\n        default:\\n            addNumber(button)\\n        }\\n    }\\n    \\n    private func clear() {\\n        currentNumber = 0\\n        previousNumber = 0\\n        operation = \\\"\\\"\\n        isTyping = false\\n        displayText = \\\"0\\\"\\n    }\\n    \\n    private func toggleSign() {\\n        currentNumber = -currentNumber\\n        updateDisplay()\\n    }\\n    \\n    private func percentage() {\\n        if previousNumber != 0 {\\n            currentNumber = previousNumber * currentNumber / 100\\n        } else {\\n            currentNumber /= 100\\n        }\\n        updateDisplay()\\n    }\\n    \\n    private func calculate() {\\n        switch operation {\\n        case \\\"\\u00f7\\\":\\n            currentNumber = previousNumber / currentNumber\\n        case \\\"\\u00d7\\\":\\n            currentNumber = previousNumber * currentNumber\\n        case \\\"\\u2212\\\":\\n            currentNumber = previousNumber - currentNumber\\n        case \\\"+\\\":\\n            currentNumber = previousNumber + currentNumber\\n        default:\\n            break\\n        }\\n        updateDisplay()\\n        previousNumber = 0\\n        operation = \\\"\\\"\\n    }\\n    \\n    private func setOperation(_ op: String) {\\n        if previousNumber != 0 {\\n            calculate()\\n        }\\n        operation = op\\n        previousNumber = currentNumber\\n        currentNumber = 0\\n        isTyping = false\\n    }\\n    \\n    private func addDecimal() {\\n        if isTyping && !displayText.contains(\\\".\\\") {\\n            displayText += \\\".\\\"\\n        }\\n    }\\n    \\n    private func addNumber(_ number: String) {\\n        if isTyping {\\n            if displayText.count < 9 {\\n                displayText += number\\n            }\\n        } else {\\n            displayText = number\\n            isTyping = true\\n        }\\n        currentNumber = Double(displayText) ?? 0\\n    }\\n    \\n    private func updateDisplay() {\\n        if currentNumber == floor(currentNumber) {\\n            displayText = String(format: \\\"%.0f\\\", currentNumber)\\n        } else {\\n            displayText = String(currentNumber)\\n        }\\n        isTyping = false\\n    }\\n}\"}], \"features\": [\"Basic calculator operations: addition, subtraction, multiplication, division\", \"Percentage calculation\", \"Toggle positive/negative sign\", \"Decimal point support\", \"All Clear (AC) to reset calculator\", \"Sleek black background with orange circular buttons\", \"Large display text for easy readability\"], \"bundle_id\": \"com.swiftgen.coolcalcula\", \"app_name\": \"Cool Calcula\", \"unique_aspects\": \"The calculator has a modern, visually appealing design with the black background and orange circular buttons. The large display font makes it easy to read the current value. It supports standard calculator functions like AC to clear, percentage, decimal point, and toggling the sign, in addition to basic math operations.\", \"project_tracking_id\": \"proj_847cd51c\", \"generated_by_llm\": \"claude\"}"
  ]
}