#!/usr/bin/env python3
"""
Test script to verify complex app generation fixes
"""

import asyncio
import aiohttp
import json
import time

async def test_food_delivery_app():
    """Test creating a DoorDash-style food delivery app"""
    
    url = "http://localhost:8000/api/generate"
    
    # Complex food delivery app description
    description = """Create a DoorDash-style food delivery app with:
    - Restaurant browsing with search and filters
    - Menu viewing with item details and customization
    - Shopping cart with quantity adjustment
    - User authentication and profile
    - Order tracking with real-time updates
    - Delivery address management
    - Payment integration placeholder
    - Rating and review system
    - Push notifications for order updates
    - Map view for delivery tracking"""
    
    payload = {
        "description": description,
        "ios_version": "16.0"
    }
    
    print("🚀 Testing complex food delivery app generation...")
    print(f"📝 Description: {description[:100]}...")
    
    start_time = time.time()
    
    async with aiohttp.ClientSession() as session:
        try:
            # Send generation request
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    project_id = result.get('project_id')
                    print(f"✅ Generation started with project ID: {project_id}")
                    
                    # Connect to WebSocket for progress updates
                    ws_url = f"ws://localhost:8000/ws/{project_id}"
                    async with session.ws_connect(ws_url) as ws:
                        print("📡 Connected to WebSocket for progress updates")
                        
                        async for msg in ws:
                            if msg.type == aiohttp.WSMsgType.TEXT:
                                data = json.loads(msg.data)
                                
                                # Print progress updates
                                if data.get('type') == 'status':
                                    print(f"[{data.get('status', 'unknown')}] {data.get('message', '')}")
                                
                                # Check for completion
                                if data.get('type') == 'complete':
                                    elapsed = time.time() - start_time
                                    print(f"\n🎉 Generation completed in {elapsed:.1f} seconds!")
                                    print(f"📊 Status: {data.get('status')}")
                                    print(f"📱 App Name: {data.get('app_name')}")
                                    print(f"📁 Files Generated: {data.get('files_count')}")
                                    print(f"✨ Features: {', '.join(data.get('features', [])[:5])}")
                                    print(f"🤖 Generated by: {data.get('generated_by_llm')}")
                                    break
                                
                                # Check for errors
                                if data.get('type') == 'error':
                                    print(f"\n❌ Error: {data.get('message')}")
                                    print(f"Details: {data.get('details')}")
                                    break
                            
                            elif msg.type == aiohttp.WSMsgType.ERROR:
                                print(f'WebSocket error: {ws.exception()}')
                                break
                else:
                    print(f"❌ Failed to start generation: {response.status}")
                    error_text = await response.text()
                    print(f"Error: {error_text}")
                    
        except Exception as e:
            print(f"❌ Exception: {str(e)}")

async def test_simple_app():
    """Test that simple app generation still works"""
    
    url = "http://localhost:8000/api/generate"
    
    # Simple app description
    description = "Create a basic counter app with increment and decrement buttons"
    
    payload = {
        "description": description,
        "ios_version": "16.0"
    }
    
    print("\n🚀 Testing simple app generation...")
    print(f"📝 Description: {description}")
    
    start_time = time.time()
    
    async with aiohttp.ClientSession() as session:
        try:
            # Send generation request
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    project_id = result.get('project_id')
                    print(f"✅ Generation started with project ID: {project_id}")
                    
                    # Wait a bit for processing
                    await asyncio.sleep(5)
                    
                    print(f"✅ Simple app test passed!")
                    elapsed = time.time() - start_time
                    print(f"⏱️  Completed in {elapsed:.1f} seconds")
                else:
                    print(f"❌ Failed: {response.status}")
                    
        except Exception as e:
            print(f"❌ Exception: {str(e)}")

async def main():
    """Run all tests"""
    print("🧪 SwiftGen Complex App Generation Test Suite")
    print("=" * 50)
    
    # Test 1: Complex food delivery app
    await test_food_delivery_app()
    
    # Wait before next test
    await asyncio.sleep(2)
    
    # Test 2: Simple app (ensure we didn't break simple apps)
    await test_simple_app()
    
    print("\n✅ All tests completed!")

if __name__ == "__main__":
    asyncio.run(main())