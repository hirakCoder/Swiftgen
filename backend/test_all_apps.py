#!/usr/bin/env python3
"""Test script to verify all app types generation and LLM routing"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"

# Test cases for different app types
TEST_APPS = [
    {
        "name": "Timer App",
        "app_name": "TimerPro",
        "description": "Create a timer app with countdown functionality, preset times (1, 5, 10 minutes), and visual progress indicator"
    },
    {
        "name": "Todo App", 
        "app_name": "TaskMaster",
        "description": "Build a todo list app with ability to add, complete, and delete tasks. Include task categories and due dates"
    },
    {
        "name": "Calculator App",
        "app_name": "CalcPro", 
        "description": "Create a calculator app with basic operations (add, subtract, multiply, divide) and a clean, modern interface"
    },
    {
        "name": "Weather App",
        "app_name": "WeatherNow",
        "description": "Build a weather app that shows current temperature, conditions, and 5-day forecast for a city"
    }
]

def test_app_generation(test_case):
    """Test generation of a single app"""
    print(f"\n{'='*60}")
    print(f"Testing: {test_case['name']}")
    print(f"{'='*60}")
    
    url = f"{BASE_URL}/api/generate"
    payload = {
        "description": test_case["description"],
        "app_name": test_case["app_name"]
    }
    
    try:
        print(f"Sending request...")
        response = requests.post(url, json=payload, timeout=180)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ SUCCESS: {result.get('message', 'App generated')}")
            print(f"   Project ID: {result.get('project_id')}")
            print(f"   Generated by: {result.get('generated_by', 'Unknown')}")
            
            # Track which LLM was used
            return {
                "app": test_case["name"],
                "success": True,
                "project_id": result.get('project_id'),
                "llm": result.get('generated_by', 'Unknown')
            }
        else:
            print(f"‚ùå FAILED: Status {response.status_code}")
            print(f"   Error: {response.text}")
            return {
                "app": test_case["name"],
                "success": False,
                "error": response.text
            }
            
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return {
            "app": test_case["name"],
            "success": False,
            "error": str(e)
        }

def main():
    print("üöÄ SwiftGen Multi-App Test Suite")
    print("Testing various app types and LLM routing...")
    
    results = []
    
    # Test each app type
    for test_case in TEST_APPS:
        result = test_app_generation(test_case)
        results.append(result)
        
        # Wait between tests to avoid overwhelming the system
        time.sleep(5)
    
    # Summary
    print(f"\n{'='*60}")
    print("üìä TEST SUMMARY")
    print(f"{'='*60}")
    
    successful = sum(1 for r in results if r["success"])
    total = len(results)
    
    print(f"\nTotal Tests: {total}")
    print(f"Successful: {successful}")
    print(f"Failed: {total - successful}")
    print(f"Success Rate: {(successful/total)*100:.1f}%")
    
    # LLM Usage Summary
    print(f"\nü§ñ LLM Usage:")
    llm_counts = {}
    for r in results:
        if r["success"]:
            llm = r.get("llm", "Unknown")
            llm_counts[llm] = llm_counts.get(llm, 0) + 1
    
    for llm, count in llm_counts.items():
        print(f"   {llm}: {count} apps")
    
    # Detailed Results
    print(f"\nüìã Detailed Results:")
    for r in results:
        status = "‚úÖ" if r["success"] else "‚ùå"
        print(f"{status} {r['app']}")
        if r["success"]:
            print(f"   - Project: {r['project_id']}")
            print(f"   - LLM: {r['llm']}")
        else:
            print(f"   - Error: {r.get('error', 'Unknown error')[:100]}...")

if __name__ == "__main__":
    main()