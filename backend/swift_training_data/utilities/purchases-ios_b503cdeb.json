{
  "repo": "purchases-ios",
  "description": "In-app purchases and subscriptions made easy. Support for iOS, watchOS, tvOS, macOS, and visionOS.",
  "file_path": "Package.swift",
  "content": "// swift-tools-version:5.9\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\nimport class Foundation.ProcessInfo\nimport struct Foundation.URL\n\n/// This looks for a file named `Local.xcconfig` in the root of the purchases-ios[-spm] repo, and reads any compiler\n/// flags defined in it. It does nothing if this file does not exist in this exact folder. This file does not exist on\n/// a clean checkout. It has to be created manually by a developer.\nvar additionalCompilerFlags: [PackageDescription.SwiftSetting] = {\n    guard let config = try? String(\n        contentsOf: URL(fileURLWithPath: #filePath)\n            .deletingLastPathComponent()\n            .appendingPathComponent(\"Local.xcconfig\")\n    ) else {\n        return []\n    }\n    // We split the capture group by space and remove any special flags, such as $(inherited).\n    return config\n        .firstMatch(of: #/^SWIFT_ACTIVE_COMPILATION_CONDITIONS *= *(.*)$/#.anchorsMatchLineEndings())?\n        .output\n        .1\n        .split(whereSeparator: \\.isWhitespace)\n        .filter { !$0.isEmpty && !$0.hasPrefix(\"$\") }\n        .map { .define(String($0)) }\n        ?? []\n}()\n\nvar ciCompilerFlags: [PackageDescription.SwiftSetting] = [\n    // REPLACE_WITH_DEFINES_HERE\n]\n\n// Only add DocC Plugin when building docs, so that clients of this library won't\n// unnecessarily also get the DocC Plugin\nlet environmentVariables = ProcessInfo.processInfo.environment\nlet shouldIncludeDocCPlugin = environmentVariables[\"INCLUDE_DOCC_PLUGIN\"] == \"true\"\n\nvar dependencies: [Package.Dependency] = [\n    .package(url: \"https://github.com/quick/nimble\", exact: \"13.7.1\"),\n    // SST requires iOS 13 starting from version 1.13.0\n    .package(\n        url: \"https://github.com/pointfreeco/swift-snapshot-testing\",\n        revision: \"26ed3a2b4a2df47917ca9b790a57f91285b923fb\"\n    )\n]\nif shouldIncludeDocCPlugin {\n    // Versions 1.4.0 and 1.4.1 are failing to compile, so we are pinning it to 1.3.0 for now\n    // https://github.com/RevenueCat/purchases-ios/pull/4216\n    dependencies.append(.package(\n        url: \"https://github.com/apple/swift-docc-plugin\",\n        revision: \"26ac5758409154cc448d7ab82389c520fa8a8247\"\n    ))\n}\n\n// See https://github.com/RevenueCat/purchases-ios/pull/2989\n// #if os(visionOS) can't really be used in Xcode 13, so we use this instead.\nlet visionOSSetting: SwiftSetting = .define(\"VISION_OS\", .when(platforms: [.visionOS]))\n\nlet package = Package(\n    name: \"RevenueCat\",\n    defaultLocalization: \"en\",\n    platforms: [\n        .macOS(.v10_15),\n        .watchOS(\"6.2\"),\n        .tvOS(.v13),\n        .iOS(.v13),\n        .visionOS(.v1)\n    ],\n    products: [\n        .library(name: \"RevenueCat\",\n                 targets: [\"RevenueCat\"]),\n        .library(name: \"RevenueCat_CustomEntitlementComputation\",\n                 targets: [\"RevenueCat_CustomEntitlementComputation\"]),\n        .library(name: \"ReceiptParser\",\n                 targets: [\"ReceiptParser\"]),\n        .library(name: \"RevenueCatUI\",\n                 targets: [\"RevenueCatUI\"])\n    ],\n    dependencies: dependencies,\n    targets: [\n        .target(name: \"RevenueCat\",\n                path: \"Sources\",\n                exclude: [\"Info.plist\", \"LocalReceiptParsing/ReceiptParser-only-files\"],\n                resources: [\n                    .copy(\"../Sources/PrivacyInfo.xcprivacy\")\n                ],\n                swiftSettings: [visionOSSetting] + ciCompilerFlags + additionalCompilerFlags),\n        .target(name: \"RevenueCat_CustomEntitlementComputation\",\n                path: \"CustomEntitlementComputation\",\n                exclude: [\"Info.plist\", \"LocalReceiptParsing/ReceiptParser-only-files\"],\n                resources: [\n                    .copy(\"PrivacyInfo.xcprivacy\")\n                ],\n                swiftSettings: [\n                    .define(\"ENABLE_CUSTOM_ENTITLEMENT_COMPUTATION\"),\n                    visionOSSetting\n                ] + ciCompilerFlags + additionalCompilerFlags),\n        // Receipt Parser\n        .target(name: \"ReceiptParser\",\n                path: \"LocalReceiptParsing\"),\n        .testTarget(name: \"ReceiptParserTests\",\n                    dependencies: [\n                        \"ReceiptParser\",\n                        .product(name: \"Nimble\", package: \"nimble\")\n                    ],\n                    exclude: [\"ReceiptParserTests-Info.plist\"]),\n        // RevenueCatUI\n        .target(name: \"RevenueCatUI\",\n                dependencies: [\"RevenueCat\"],\n                path: \"RevenueCatUI\",\n                resources: [\n                    // Note: these have to match the values in RevenueCatUI.podspec\n                    .copy(\"Resources/background.jpg\"),\n                    .process(\"Resources/icons.xcassets\")\n                ],\n                swiftSettings: ciCompilerFlags + additionalCompilerFlags),\n        .testTarget(name: \"RevenueCatUITests\",\n                    dependencies: [\n                        \"RevenueCatUI\",\n                        .product(name: \"Nimble\", package: \"nimble\"),\n                        .product(name: \"SnapshotTesting\", package: \"swift-snapshot-testing\")\n                    ],\n                    exclude: [\"Templates/__Snapshots__\", \"Data/__Snapshots__\", \"TestPlans\"],\n                    resources: [\n                        .copy(\"Resources/header.heic\"),\n                        .copy(\"Resources/background.heic\"),\n                        .copy(\"PaywallsV2/__PreviewResources__\")\n                    ])\n    ]\n)\n",
  "category": "utilities",
  "timestamp": "2025-06-27T15:20:38.258031"
}